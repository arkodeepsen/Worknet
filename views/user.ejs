<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Confirm Your Details | WorkNet</title>
    <link rel="icon" href="/assets/favicon.ico" type="image/x-icon">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/style/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <!-- Leaflet.js CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<!-- Leaflet.js JS -->
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="/scripts/index.js" defer></script>
    <style>
        /* General Body Styling */
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            color: #333;
            transition: background-color 0.3s ease;
        }
        
        /* Navbar Styling */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #333, #444);
            padding: 15px;
            color: #fff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            position: sticky;
            top: 0;
            z-index: 1000;
            transition: background-color 0.4s ease;
        }
        
        .navbar-logo img {
            height: 50px;
            transition: transform 0.3s ease;
        }
        
        .navbar-logo img:hover {
            transform: rotate(360deg);
        }
        
        .navbar-links {
            display: flex;
            gap: 25px;
        }
        
        .navbar-links a {
            color: #fff;
            text-decoration: none;
            font-weight: bold;
            transition: color 0.3s ease;
            position: relative;
        }
        
        .navbar-links a::after {
            content: '';
            position: absolute;
            width: 0%;
            height: 2px;
            background: #ff8a00;
            bottom: -2px;
            left: 0;
            transition: width 0.3s ease;
        }
        
        .navbar-links a:hover::after {
            width: 100%;
        }
        
        /* Container Styling */
        .container {
            width: 90%;
            max-width: 800px;
            margin: 50px auto;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 35px;
            box-shadow: 0px 8px 25px rgba(0, 0, 0, 0.2);
            border-radius: 20px;
            transition: all 0.4s ease;
        }
        
        .container:hover {
            box-shadow: 0px 12px 40px rgba(0, 0, 0, 0.3);
            transform: scale(1.02);
        }
        
        /* Headings & Paragraph */
        h2 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-size: 32px;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: relative;
        }
        
        h2::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background-color: #007bff;
        }
        
        p {
            text-align: center;
            color: #555;
            margin-bottom: 25px;
            line-height: 1.6;
        }
        
        /* Form Styling */
        form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            font-weight: bold;
            margin-bottom: 10px;
            display: block;
            color: #333;
            font-size: 18px;
        }
        
        /* Input Fields */
        input[type="text"],
        input[type="email"],
        input[type="file"],
        select {
            width: 100%;
            padding: 15px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }
        
        input[type="text"]:focus,
        input[type="email"]:focus,
        input[type="file"]:focus,
        select:focus {
            border-color: #007bff;
            box-shadow: 0 0 12px rgba(0, 123, 255, 0.4);
        }
        
        /* Options Styling */
        .gender-options,
        .language-tags,
        .type-options,
        .skills-tags,
        .course-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 2px;
            margin-bottom: 2px;
        }
        
        /* Tag, Type, and Course Button Styling */
        .tag, .type-btn, .course-btn {
            background-color: #e0e0e0;
            color: #333;
            padding: 12px 18px;
            border-radius: 25px;
            cursor: pointer;
            border: 1px solid #ddd;
            transition: background-color 0.4s ease, color 0.4s ease, box-shadow 0.4s ease;
        }
        
        .tag:hover, .type-btn:hover, .course-btn:hover,
        .tag.selected, .type-btn.selected, .course-btn.selected {
            background-color: #007bff;
            color: #fff;
            box-shadow: 0 4px 12px rgba(0, 123, 255, 0.4);
            transform: scale(1.1);
        }
        
        /* Next-level Add Skill Button with Glass Finish */
.add-skill-btn {
    background: rgba(30, 30, 30, 0.2); /* Dark glass effect */
    border: 1px solid rgba(255, 255, 255, 0.4); /* Light border */
    color: #000000; /* Light gray text */
    padding: 14px 20px;
    border-radius: 25px;
    cursor: pointer;
    position: relative;
    -webkit-backdrop-filter: blur(10px); /* Adjust blur */
    backdrop-filter: blur(10px); /* Adjust blur */
    box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.3); /* Subtle shadow */
    transition: background-color 0.4s ease, transform 0.4s ease, box-shadow 0.4s ease;
    animation: glitterIdle 1.5s infinite linear; /* Continuous glitter effect */
    overflow: hidden;
}

/* Hover effect */
.add-skill-btn:hover {
    background: rgba(0, 123, 255, 0.8); /* Bright blue background */
    border: 1px solid rgba(255, 255, 255, 0.6); /* Slightly lighter border */
    color: #000000; /* White text */
    font-weight: bold;
    box-shadow: 0px 12px 40px rgba(0, 123, 255, 0.7); /* Bright blue shadow */
    transform: translateY(-5px) scale(1.05); /* Slight scale up */
}

/* Glitter effect */
.add-skill-btn::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0) 70%);
    opacity: 0.6;
    animation: glitterHover 1.5s infinite;
    z-index: 0;
    border-radius: 25px; /* Match the button’s border radius */
    pointer-events: none;
}

.add-skill-btn:hover::before {
    animation: none; /* Stop glitter animation on hover */
}

/* Button icon animation */
.add-skill-btn .icon {
    width: 16px;
    height: 16px;
    margin-left: 8px;
    transition: transform 0.4s ease;
}

.add-skill-btn:hover .icon {
    transform: rotate(360deg) scale(1.5);
}

/* Idle glitter animation */
@keyframes glitterIdle {
    0% {
        background: rgba(30, 30, 30, 0.2); /* Darker background for idle */
        box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.3); /* Subtle shadow */
    }
    50% {
        background: rgba(30, 30, 30, 0.3); /* Slightly lighter */
        box-shadow: 0px 10px 40px rgba(0, 0, 0, 0.4); /* Slightly more intense shadow */
    }
    100% {
        background: rgba(30, 30, 30, 0.2); /* Return to original */
        box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.3);
    }
}

/* Hover glitter animation */
@keyframes glitterHover {
    0% {
        transform: translateX(-300%) translateY(-300%);
        opacity: 0.5;
    }
    50% {
        transform: translateX(0%) translateY(0%);
        opacity: 1;
    }
    100% {
        transform: translateX(300%) translateY(300%);
        opacity: 0.5;
    }
}
        
        /* Submit Button */
        button[type="submit"], .submit-btn {
            background-color: #007bff;
            color: #fff;
            padding: 14px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.4s ease, box-shadow 0.4s ease, transform 0.3s ease;
        }
        
        button[type="submit"]:hover, .submit-btn:hover {
            background-color: #0056b3;
            box-shadow: 0 4px 12px rgba(0, 123, 255, 0.5);
            transform: translateY(-3px);
        }        
        /* Modal styling */
    .modal {
        display: none; 
        position: fixed;
        z-index: 10000; /* Ensure it sits on top of everything */
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.5); 
        -webkit-backdrop-filter: blur(10px); /* Blur out the entire screen for Safari */
        backdrop-filter: blur(10px); /* Blur out the entire screen */
    }

    .modal-content {
        background-color: #fff;
        margin: 15% auto;
        padding: 20px;
        border-radius: 10px;
        width: 300px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        animation: fadeIn 0.3s ease-in-out;
    }
    .icon-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
      }
      
    .icon-button svg {
        width: 18px;
        height: 18px;
        fill: #ffffff;
        margin-left: 2px;
        transform: translateY(3px);
    }
    .close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 24px;
        cursor: pointer;
    }

    .modal-content h2 {
        margin: 0 0 15px;
    }

    .modal-content input {
        width: 90%;
        padding: 8px;
        margin-bottom: 15px;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .modal-content button {
        padding: 8px 16px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .modal-content button:hover {
        background-color: #0056b3;
    }
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
      }
      
      .close:hover,
      .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }
      
    @keyframes fadeIn {
        from {opacity: 0;}
        to {opacity: 1;}
    }
    #suggestions {
        list-style-type: none;
        margin: 0;
        padding: 0;
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        width: 91%; /* Match the width of the input */
        max-height: 150px;
        overflow-y: auto; /* Scroll if too many items */
        z-index: 1000;
    }
    
    #suggestions li {
        padding: 8px;
        cursor: pointer;
    }
    
    #suggestions li:hover {
        background-color: #f0f0f0;
    }
    /* Modal container */
.mapmodal {
    display: none; /* Hidden by default */
    position: relative; /* Position it relative to the document */
    left: 0;
    top: 0;
    align-items: center;
    z-index: 1000; /* Ensure it sits on top of everything */
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
}

/* Modal dialog */
.mapmodal-dialog {
    margin: 1% auto;
    width: 100%;
    max-width: 600px;
}

/* Modal content */
.mapmodal-content {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    width: 100%;
}

/* Modal header */
.mapmodal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Modal title */
.mapmodal-title {
    font-size: 20px;
    font-weight: bold;
}

/* Close button */
.close-mapmodal {
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
}

/* Modal body */
.mapmodal-body {
    margin: 20px 0;
}

/* Modal footer */
.mapmodal-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Buttons */
.mapmodal-footer button {
    padding: 8px 16px;
    background-color: #007bff;
    border: none;
    color: white;
    border-radius: 4px;
    cursor: pointer;
}

.mapmodal-footer button#close-modal {
    background-color: #6c757d;
}

.mapmodal-footer button:hover {
    opacity: 0.9;
}
.breathing-text {
    display: inline-block;
    animation: breathing 5s infinite alternate;
    background-color: #e0e0e0;
            color: #333;
            padding: 12px 18px;
            border-radius: 25px;
            cursor: pointer;
            border: 1px solid #ddd;
            transition: background-color 0.4s ease, color 0.4s ease, box-shadow 0.4s ease;
}
.breathing-text:hover {
    background-color: #007bff;
    color: #fff;
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.4);
    transform: scale(1.0);
}

@keyframes breathing {
    from {
        transform: scale(0.95);
    }
    to {
        transform: scale(0.99);
    }
}
::-webkit-scrollbar {
    width: 10px;
}

::-webkit-scrollbar-track {
    background: rgba(31, 31, 31, 0.5);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.5);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.7);
}

    /* Override Awesomplete styles for the input box */
    #college.awesomplete,
    #stream.awesomplete {
        width: 100%; /* Ensure the input box takes full width */
        padding: 10px; /* Add padding */
        border: 1px solid #ccc; /* Add border */
        border-radius: 4px; /* Add border radius */
        box-shadow: none; /* Remove box shadow */
    }

        /* Custom styles for the input box */
        #college,
        #stream {
            width: 730px; /* Ensure the input box takes full width */
            height: 50px; /* Set the height */
            padding: 10px; /* Add padding */
            border: 1px solid #ccc; /* Add border */
            border-radius: 10px; /* Add border radius */
            box-shadow: none; /* Remove box shadow */
        }
</style>

</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="navbar-logo">
            <a href="/index"><img src="/assets/worknet.png" alt="WorkNet Logo"></a>
        </div>
        <ul class="navbar-links">
            <a href="/index">Home</a>
            <a href="/about">About Us</a>
            <a href="/dashboard" class="dashboard-button">Dashboard</a>
        </ul>
    </nav>

    <div class="container">
        <h2>Confirm your details</h2>
        <p>Your up-to-date information helps us serve you better</p>
        <form id="details-form" method="POST" action="/submit-details" enctype="multipart/form-data">
            <div class="form-group">
              <label for="firstname">First name</label>
              <input type="text" name="firstName" placeholder="First Name" required pattern="^[A-Za-z]+$" oninput="validateName('firstName')">
              <small id="firstNameError" style="color: red; display: none;">Please enter a valid first name (letters only).</small>
            </div>
            
            <div class="form-group">
              <label for="lastname">Last name</label>
              <input type="text" name="lastName" placeholder="Last Name" required pattern="^[A-Za-z]+$" oninput="validateName('lastName')">
              <small id="lastNameError" style="color: red; display: none;">Please enter a valid last name (letters only).</small>
            </div>
        
            <div class="form-group">
                <label for="profilePicture">Profile picture (Recommended)</label>
                <div>
                  <img id="profilePicPreview" class="profilePicPreview" src="/assets/default.jpg" alt="Profile Picture" style="width: 100px; height: 100px; object-fit: cover; border: 1px solid #ccc;" onclick="openModal()">
                </div>
                <input type="file" id="profilePicture" name="profilePicture" accept="image/*" onchange="previewProfilePicture(event)">
              </div>

            <div class="form-group">
              <label for="email">Email</label>
              <input type="email" id="email" name="email" value="" required readonly pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$" oninput="validateEmail()">
              <small id="emailError" style="color: red; display: none;">Please enter a valid email address.</small>
            </div>

            <div class="form-group">
              <label for="contact">Contact number</label>
              <input type="text" id="contact" name="contact" placeholder="+91 1234567890" required pattern="^\+91 \d{10}$" oninput="validateContact()">
              <small id="contactError" style="color: red; display: none;">Please enter a valid contact number in the format +91 1234567890.</small>
            </div>
            
            <div class="form-group">
                <label for="city">Address</label>
                <input type="text" id="city" name="city" placeholder="City" required autocomplete="off">
                <ul id="suggestions"></ul>
                <!-- Button to trigger the modal -->
<button type="button" class="breathing-text" id="gps-button">📍 Get location from GPS</button>

<!-- Modal for map -->
<div class="mapmodal" id="mapModal">
    <div class="mapmodal-dialog">
        <div class="mapmodal-content">
            <div class="mapmodal-header">
                <h5 class="mapmodal-title">Adjust Location</h5>
                <!--<span class="close-mapmodal" id="closeModal">&times;</span>-->
            </div>
            <div class="mapmodal-body">
                <!-- Map container -->
                <div id="map" style="height: 400px; width: 100%;"></div>
            </div>
            <div class="mapmodal-footer">
                <button type="button" id="close-modal">Close</button>
                <button type="button" id="confirm-location">Confirm Location</button>
            </div>
        </div>
    </div>
</div>
            </div>            

            <div class="form-group">
                <label>Gender</label>
                <div class="gender-options">
                    <input type="radio" name="gender" value="female" id="female">
                    <label for="female">Female</label>

                    <input type="radio" name="gender" value="male" id="male">
                    <label for="male">Male</label>

                    <input type="radio" name="gender" value="other" id="other">
                    <label for="other">Other</label>
                </div>
            </div>

            <div class="form-group">
                <label>Languages you know</label>
                <div class="language-tags" id="language-tags">
                    <span class="tag" data-lang="English">English</span>
                    <span class="tag" data-lang="Hindi">Hindi</span>
                    <!-- Add more languages dynamically if needed -->
                </div>
                <input type="hidden" id="languages" name="languages" value="">
                <button type="button" class="type-btn" onclick="addLanguage()">+ Add more languages</button>
            </div>            

            <!-- Type Section -->
            <div class="form-group">
                <label>Type</label>
                <div class="type-options" id="type-options">
                    <button type="button" class="type-btn" onclick="selectType('College student')">College student</button>
                    <button type="button" class="type-btn" onclick="selectType('Fresher')">Fresher</button>
                    <button type="button" class="type-btn" onclick="selectType('Experienced')">Experienced</button>
                    <button type="button" class="type-btn" onclick="selectType('Intern')">Intern</button>
                    <button type="button" class="type-btn" onclick="addCustomType()">+ Add more types</button>
                </div>
                <input type="hidden" id="type" name="type" value="">
            </div> 

            <div class="form-group">
                <label>Skills</label> 
                
                <div class="skills-tags" id="skills-tags">
                    <!-- Existing skill tags -->
                    <span class="tag" data-skill="JavaScript">JavaScript</span>
                    <span class="tag" data-skill="Python">Python</span>
                    <span class="tag" data-skill="HTML">HTML</span>
                    <span class="tag" data-skill="CSS">CSS</span>
                    <!-- Skill suggestions will be added here -->
                </div>
                <input type="hidden" id="skills" name="skills" value="">
                <button type="button" class="course-btn" onclick="addSkill()">+ Add more skills</button>
                <button type="button" class="add-skill-btn" onclick="suggestSkill()">+<img src="/assets/chatbot.png" alt="Chatbot Icon" class="icon"> AI suggestions<img src="assets/chatbot.png" alt="Chatbot Icon" class="icon"></button>
            </div>             

<!-- Courses Section -->
<div class="form-group">
    <label>Courses</label>
    <div class="course-tags" id="course-tags">
        <button type="button" class="course-btn" onclick="selectCourse('Bachelor of Engineering (B.E.)')">Bachelor of Engineering (B.E.)</button>
        <button type="button" class="course-btn" onclick="selectCourse('Bachelor of Technology (B.Tech)')">Bachelor of Technology (B.Tech)</button>
        <button type="button" class="course-btn" onclick="selectCourse('Master of Technology (M.Tech)')">Master of Technology (M.Tech)</button>
        <button type="button" class="course-btn" onclick="selectCourse('Bachelor of Science (B.Sc.)')">Bachelor of Science (B.Sc.)</button>
        <button type="button" class="course-btn" onclick="selectCourse('Master of Science (M.Sc.)')">Master of Science (M.Sc.)</button>
        <button type="button" class="course-btn" onclick="selectCourse('Bachelor of Business Administration (BBA)')">Bachelor of Business Administration (BBA)</button>
        <button type="button" class="course-btn" onclick="selectCourse('Master of Business Administration (MBA)')">Master of Business Administration (MBA)</button>
        <button type="button" class="course-btn" onclick="selectCourse('Bachelor of Computer Applications (BCA)')">Bachelor of Computer Applications (BCA)</button>
        <button type="button" class="course-btn" onclick="addCustomCourse()">+ Add more courses</button>
    </div>
    <input type="hidden" id="courses" name="courses" value="">
</div>

            <!-- New Fields -->
            <div class="form-group">
                <label for="college">College name</label>
                <input type="text" id="college" name="college" placeholder="Eg. BTS Pilani">
            </div>

            <div class="form-group">
                <label for="stream">Stream (Optional)</label>
                <input type="text" id="stream" name="stream" placeholder="Eg. Computer Science">
            </div>

            <div class="form-group">
                <label>Start year</label>
                <select id="start-year" name="startYear" title="Start Year">
                    <option value="">Choose year</option>
                    <!-- Add more year options -->
                    <option value="2020">2020</option>
                    <option value="2021">2021</option>
                    <option value="2022">2022</option>
                    <option value="2023">2023</option>
                    <option value="2024">2024</option>
                </select>
            </div>

            <div class="form-group">
                <label>End year</label>
                <select id="end-year" name="endYear" title="End Year">
                    <option value="">Choose year</option>
                    <!-- Add more year options -->
                    <option value="2024">2024</option>
                    <option value="2025">2025</option>
                    <option value="2026">2026</option>
                    <option value="2027">2027</option>
                    <option value="2028">2028</option>
                </select>
            </div>

            <input type="hidden" id="userId" name="userId" value="">

            <!-- Submit Button -->
            <button type="submit" class="submit-btn">Confirm and continue</button>
        </form>
    </div>
    <div id="message" style="display: none; color: green; text-align: center; margin-top: 20px;"></div>
    
    <script>
                document.addEventListener('DOMContentLoaded', function() {
            const collegeInput = document.getElementById('college');
        
            function fetchInstitutions(url) {
                return fetch(url)
                    .then(response => response.text())
                    .then(data => {
                        return new Promise((resolve, reject) => {
                            Papa.parse(data, {
                                header: true,
                                skipEmptyLines: true,
                                complete: function(results) {
                                    const institutions = results.data.map(row => {
                                        const university = row['University Name'] ? row['University Name'].replace(/"/g, '').trim() : '';
                                        const college = row['College Name'] ? row['College Name'].replace(/"/g, '').trim() : '';
                                        return `${college}, ${university}`; // Combine College and University
                                    }).filter(institution => institution !== ', '); // Filter out any empty values
                                    resolve(institutions);
                                },
                                error: function(error) {
                                    reject(error);
                                }
                            });
                        });
                    });
            }
        
            function initializeCollegeAwesomplete(list) {
                new Awesomplete(collegeInput, {
                    list: list,
                    minChars: 1,
                    maxItems: 10,
                    autoFirst: true
                });
            }
        
            // Fetch and initialize institutions
            fetchInstitutions('/data/institutions.csv')
                .then(institutions => {
                    console.log("Awesomplete institutions initialized");
                    initializeCollegeAwesomplete(institutions);
                })
                .catch(error => console.error('Error fetching institutions:', error));
        });
    </script>

    <script>
                document.addEventListener('DOMContentLoaded', function() {
            const streamInput = document.getElementById('stream');
        
            function fetchStreams(url) {
                return fetch(url)
                    .then(response => response.text())
                    .then(data => {
                        return new Promise((resolve, reject) => {
                            Papa.parse(data, {
                                header: true,
                                skipEmptyLines: true,
                                complete: function(results) {
                                    const specializations = results.data.map(row => {
                                        return row['CIPTitle'] ? row['CIPTitle'].replace(/\.$/, '').trim() : '';
                                    }).filter(title => title);
                                    resolve(specializations);
                                },
                                error: function(error) {
                                    reject(error);
                                }
                            });
                        });
                    });
            }
        
            function initializeStreamAwesomplete(list) {
                new Awesomplete(streamInput, {
                    list: list,
                    minChars: 1,
                    maxItems: 10,
                    autoFirst: true
                });
            }
        
            // Fetch and initialize streams
            fetchStreams('/data/streams.csv')
                .then(streams => {
                    console.log("Awesomplete streams initialized");
                    initializeStreamAwesomplete(streams);
                })
                .catch(error => console.error('Error fetching streams:', error));
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
          const userId = localStorage.getItem('userId'); // Assuming userId is stored in localStorage when the user logs in
          async function fetchEmail(userId) {
            try {
              const response = await fetch(`/get-email/${userId}`);
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              const result = await response.json();
              return result.email;
            } catch (error) {
              console.error('Error fetching email:', error);
              return '';
            }
          }
        
          async function setEmail(userId) {
              email = await fetchEmail(userId);
            document.querySelector('input[name="email"]').value = email;
          }

          setEmail(userId);

          if (userId) {
            fetch(`/get-user-details/${userId}`)
              .then(response => response.json())
              .then(data => {
                if (data) {
                    profilePicture = data.profilePicture && data.profilePicture !== 'null' 
                    ? `${data.profilePicture}` 
                    : 'assets/default.jpg';
                    document.getElementById('profilePicPreview').src = profilePicture;
                  // Auto-fill form fields with existing data
                  document.querySelector('input[name="firstName"]').value = data.firstName || '';
                  document.querySelector('input[name="lastName"]').value = data.lastName || '';
                  document.querySelector('input[name="contact"]').value = data.contact || '';
                  document.querySelector('input[name="city"]').value = data.city || '';
                  
                  // Handle gender selection
                  if (data.gender) {
                    document.querySelector(`input[name="gender"][value="${data.gender}"]`).checked = true;
                  }
        
                  // Auto-fill languages
          const languages = data.languages ? data.languages.split(',') : [];
          languages.forEach(lang => {
            let tag = document.querySelector(`.tag[data-lang="${lang}"]`);
            
            // If the language is not in the default list, add it dynamically
            if (!tag) {
              const languageTags = document.getElementById('language-tags');
              const newTag = document.createElement('span');
              newTag.className = 'tag selected';  // Mark as selected
              newTag.dataset.lang = lang;
              newTag.textContent = lang;
              languageTags.appendChild(newTag);
              tag = newTag;
            }
            
            tag.classList.add('selected');  // Mark the tag as selected
          });
          document.querySelector('input[name="languages"]').value = languages.join(',');

          // Auto-fill skills
          const skills = data.skills ? data.skills.split(',') : [];
          skills.forEach(skill => {
            let skillTag = document.querySelector(`.tag[data-skill="${skill}"]`);
            
            // If the skill is not in the default list, add it dynamically
            if (!skillTag) {
              const skillTags = document.getElementById('skills-tags');
              const newSkillTag = document.createElement('span');
              newSkillTag.className = 'tag selected';  // Mark as selected
              newSkillTag.dataset.skill = skill;
              newSkillTag.textContent = skill;
              skillTags.appendChild(newSkillTag);
              skillTag = newSkillTag;
            }
            
            skillTag.classList.add('selected');  // Mark the skill as selected
          });
          document.querySelector('input[name="skills"]').value = skills.join(',');

          // Preselect type
          if (data.type) {
            selectType(data.type);
          }

          // Auto-fill courses correctly
const courses = data.courses ? data.courses.split(',') : [];
console.log('Initial courses array:', courses);

// Function to initialize or dynamically add courses
function initializeCourses() {
  const courseTags = document.getElementById('course-tags');

  // Create a map of existing course buttons for easy lookup
  const existingCourseButtons = Array.from(courseTags.getElementsByClassName('course-btn'))
    .reduce((map, btn) => {
      map[btn.textContent.trim()] = btn;
      return map;
    }, {});

  courses.forEach(course => {
    const trimmedCourse = course.trim();
    if (existingCourseButtons[trimmedCourse]) {
      // If the course exists, mark it as selected
      existingCourseButtons[trimmedCourse].classList.add('selected');
    } else {
      // If the course does not exist, create it
      const newCourseTag = document.createElement('button');
      newCourseTag.type = 'button';
      newCourseTag.className = 'course-btn';
      newCourseTag.dataset.course = trimmedCourse;
      newCourseTag.textContent = trimmedCourse;
      newCourseTag.onclick = () => toggleCourseSelection(newCourseTag);
      newCourseTag.classList.add('selected'); // Mark as selected if it's in the initial data
      courseTags.appendChild(newCourseTag);
    }
  });
  document.querySelector('input[name="courses"]').value = courses.join(',');
}

// Event listener for dynamically toggling course selection
document.getElementById('course-tags').addEventListener('click', (event) => {
  if (event.target.classList.contains('course-btn')) {
    toggleCourseSelection(event.target);
  }
});

// Function to handle course selection and unselection
function toggleCourseSelection(courseElement) {
  const coursesInput = document.querySelector('input[name="courses"]');
  let courses = coursesInput.value ? coursesInput.value.split(',') : [];
  const course = courseElement.textContent.trim();

  console.log('Before toggle:');
  console.log('Courses array:', courses);
  console.log('Courses input value:', coursesInput.value);

  if (courseElement.classList.contains('selected')) {
    // Unselecting the course
    console.log(`Unselecting course: ${course}`);
    courseElement.classList.remove('selected');
    courses = courses.filter(c => c !== course);
  } else {
    // Selecting the course
    console.log(`Selecting course: ${course}`);
    courseElement.classList.add('selected');
    if (!courses.includes(course)) {
      courses.push(course);
    }
  }

  coursesInput.value = courses.join(',');

  console.log('After toggle:');
  console.log('Courses array:', courses);
  console.log('Courses input value:', coursesInput.value);
}

// Initialize courses on page load
initializeCourses();

       
                  // Fill in the remaining fields
                  document.querySelector('input[name="college"]').value = data.college || '';
                  document.querySelector('input[name="stream"]').value = data.stream || '';
                  document.querySelector('select[name="startYear"]').value = data.startYear || '';
                  document.querySelector('select[name="endYear"]').value = data.endYear || '';
                }
              })
              .catch(error => {
                console.error('Error fetching user details:', error);
              });
          } else {
            console.log('User not logged in');
          }
});
        </script>
        
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const skillsTags = document.querySelectorAll('#skills-tags .tag');
            skillsTags.forEach(tag => tag.classList.remove('selected'));
        
            // Event delegation for skill tags
            document.getElementById('skills-tags').addEventListener('click', (event) => {
                if (event.target.classList.contains('tag')) {
                    toggleSkillSelection(event.target);
                }
            });
        });

            // Function to open the modal to add a new skill
function openSkillModal() {
    document.getElementById('skill-modal').style.display = 'block';
}

// Function to close the skill modal
function closeSkillModal() {
    document.getElementById('skill-modal').style.display = 'none';
}

// Function to open alert modal with a custom message
function showAlert(message) {
    document.getElementById('alert-message').textContent = message;
    document.getElementById('alert-modal').style.display = 'block';
}

// Function to close the alert modal
function closeAlertModal() {
    document.getElementById('alert-modal').style.display = 'none';
}

document.addEventListener('DOMContentLoaded', function() {
    const skillInput = document.getElementById('skill-input');

    function fetchKeywords(url) {
        return fetch(url)
            .then(response => response.text())
            .then(data => {
                return data.split('\n').map(keyword => keyword.trim()).filter(keyword => keyword !== '');
            });
    }

    function initializeSkillsAwesomplete(list) {
        new Awesomplete(skillInput, {
            list: list,
            minChars: 1,
            maxItems: 10,
            autoFirst: true
        });
    }

    // Fetch and initialize keywords
    fetchKeywords('/data/keywords.txt')
        .then(keywords => {
            console.log("Awesomplete keywords initialized");
            initializeSkillsAwesomplete(keywords);
        })
        .catch(error => console.error('Error fetching keywords:', error));
});

// Function to handle skill submission from the modal
function submitSkill() {
    const skill = document.getElementById('skill-input').value.trim();
    if (skill) {
        addSkill(skill);  // Use your existing addSkill function
        closeSkillModal();
    } else {
        showAlert('Please enter a valid skill.');
    }
}       
        // Existing function to add a new skill manually
        function addSkill(skill = null) {
            const skillsInput = document.getElementById('skills');
            let skills = skillsInput.value ? skillsInput.value.split(',') : [];
        
            // If no skill is passed (i.e., manual addition), prompt the user for input
            if (!skill) {
                openSkillModal();
            return; // Stop execution until the user submits a skill through the modal
            }
        
            if (skill && !skills.includes(skill)) {
                // Create and add the skill tag
                const skillsTags = document.getElementById('skills-tags');
                const newTag = document.createElement('span');
                newTag.className = 'tag selected';  // Add 'selected' class
                newTag.textContent = skill;
                newTag.dataset.skill = skill;
        
                skillsTags.appendChild(newTag);
                skills.push(skill);  // Add the new skill to the list
                skillsInput.value = skills.join(',');
            } else if (skills.includes(skill)) {
                showAlert('Skill already added.');
            }
        }
        
        // Function to suggest a skill from the server
        async function suggestSkill() {
            const skills = document.getElementById('skills').value.split(',').map(skill => skill.trim());
            const userId = localStorage.getItem('userId');  // Assuming userId is stored in localStorage
        
            console.log('Skills (before sending):', skills);
            console.log('User ID (before sending):', userId);
        
            const payload = { userId, skills };
            console.log('Request payload:', JSON.stringify(payload));
        
            try {
                // Use axios to send the POST request
                const response = await axios.post('/suggest-skills', payload, {
                    headers: { 'Content-Type': 'application/json' },
                });
        
                // Check if response is OK
                if (response.status !== 200) {
                    throw new Error('Error fetching suggested skill');
                }
        
                // Extract data from the response
                const data = response.data;
                const suggestedSkill = data.suggestedSkill;
        
                if (suggestedSkill) {
                    addSkill(suggestedSkill);  // Add the suggested skill dynamically
                } else {
                    showAlert('Could not generate a skill.');
                }
            } catch (error) {
                console.error('Error suggesting skill:', error);
                showAlert('Error suggesting skill. Please try again later.');
            }
        }                
 
        // Function to toggle the selection of a skill
        function toggleSkillSelection(tag) {
            const skillsInput = document.getElementById('skills');
            let skills = skillsInput.value ? skillsInput.value.split(',') : [];
            const skill = tag.dataset.skill;
        
            if (tag.classList.contains('selected')) {
                tag.classList.remove('selected');
                skills = skills.filter(s => s !== skill);  // Remove the skill from the list
            } else {
                tag.classList.add('selected');
                skills.push(skill);  // Add the skill to the list
            }
        
            skillsInput.value = skills.join(',');
        }        
        
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize language tags without the 'selected' class
            const languageTags = document.querySelectorAll('#language-tags .tag');
            languageTags.forEach(tag => tag.classList.remove('selected'));
        
            // Add click event listener to existing language tags
            document.getElementById('language-tags').addEventListener('click', (event) => {
                if (event.target.classList.contains('tag')) {
                    toggleLanguageSelection(event.target);
                }
            });
        });
        
        function toggleLanguageSelection(tag) {
            const languagesInput = document.getElementById('languages');
            let languages = languagesInput.value ? languagesInput.value.split(',') : [];
            const lang = tag.dataset.lang;
        
            if (tag.classList.contains('selected')) {
                tag.classList.remove('selected');
                languages = languages.filter(language => language !== lang);
            } else {
                tag.classList.add('selected');
                if (!languages.includes(lang)) {
                    languages.push(lang);
                }
            }
        
            languagesInput.value = languages.join(',');
        }

        // Open and close modal functions for language
function openLanguageModal() {
    document.getElementById('language-modal').style.display = 'block';
}

function closeLanguageModal() {
    document.getElementById('language-modal').style.display = 'none';
}

// Trigger open modal from the original addLanguage function
function addLanguage() {
    openLanguageModal(); // Open the modal to add a language
}

document.addEventListener('DOMContentLoaded', function() {
    const languageInput = document.getElementById('language-input');

    function fetchCSV(url) {
        return fetch(url)
            .then(response => response.text())
            .then(data => {
                return data.split('\n').map(row => {
                    const columns = row.split(',');
                    return columns[1] ? columns[1].trim() : ''; // Check if the second column exists
                }).filter(name => name !== '');
            });
    }

    function initializeLanguagesAwesomplete(list) {
        new Awesomplete(languageInput, {
            list: list,
            minChars: 1,
            maxItems: 10,
            autoFirst: true
        });
    }

    // Fetch and initialize languages
    fetchCSV('/data/languages.csv')
        .then(languages => {
            console.log("Awesomplete languages initialized");
            initializeLanguagesAwesomplete(languages);
        })
        .catch(error => console.error('Error fetching languages:', error));
});

// Submit the language from the modal input
function submitLanguage() {
    const lang = document.getElementById('language-input').value;
    const languageTags = document.getElementById('language-tags');
    const languagesInput = document.getElementById('languages');
    let languages = languagesInput.value ? languagesInput.value.split(',') : [];

    if (lang && !languages.includes(lang)) {
        const newTag = document.createElement('span');
        newTag.className = 'tag';
        newTag.textContent = lang;
        newTag.dataset.lang = lang;

        languages.push(lang);
        languagesInput.value = languages.join(',');
        languageTags.appendChild(newTag);
    } else if (languages.includes(lang)) {
        showAlert('Language already exists.');
    }

    closeLanguageModal(); // Close the modal after submission
}

// Open and close modal functions for type
function openTypeModal() {
    document.getElementById('type-modal').style.display = 'block';
}

function closeTypeModal() {
    document.getElementById('type-modal').style.display = 'none';
}

// Trigger open modal from the original addCustomType function
function addCustomType() {
    openTypeModal(); // Open the modal to add a type
}

// Submit the type from the modal input
function submitType() {
    const type = document.getElementById('type-input').value;
    const typeOptions = document.getElementById('type-options');
    const typeButtons = Array.from(document.querySelectorAll('#type-options .type-btn'));

    if (type && !typeButtons.some(btn => btn.textContent === type)) {
        const newBtn = document.createElement('button');
        newBtn.type = 'button';
        newBtn.className = 'type-btn';
        newBtn.textContent = type;
        newBtn.onclick = () => selectType(type);

        typeOptions.appendChild(newBtn);
    } else if (typeButtons.some(btn => btn.textContent === type)) {
        showAlert('Type already exists.');
    }

    closeTypeModal(); // Close the modal after submission
}

// Open and close modal functions for course
function openCourseModal() {
    document.getElementById('course-modal').style.display = 'block';
}

function closeCourseModal() {
    document.getElementById('course-modal').style.display = 'none';
}

// Trigger open modal from the original addCustomCourse function
function addCustomCourse() {
    openCourseModal(); // Open the modal to add a course
}
function openModal() {
  var modal = document.getElementById("imageModal");
  var modalImage = document.getElementById("modalImage");
  var profilePicPreview = document.getElementById("profilePicPreview");
  modalImage.src = profilePicPreview.src;
  modal.style.display = "block";
}

function closeModal() {
  var modal = document.getElementById("imageModal");
  modal.style.display = "none";
}

async function handleIconClick() {
    const profilePicPreview = document.getElementById('profilePicPreview');
    const imageUrl = profilePicPreview.src;
    const userId = localStorage.getItem('userId');

    if (imageUrl.includes('processed')) {
        showAlert('Background already removed!');
        return;
    } else if (imageUrl.includes('/assets/default.jpg')) {
        showAlert('Default profile picture cannot be processed!');
        return;
    }

    openLoadingModal();

    try {
        // Fetch the image as a Blob
        const response = await fetch(imageUrl);
        const blob = await response.blob();

        const formData = new FormData();
        formData.append('file', blob, 'profile-picture.jpg'); // Append the Blob to FormData
        formData.append('userId', userId);

        const apiResponse = await fetch('/upload-image', {
            method: 'POST',
            body: formData
        });

        const result = await apiResponse.json();
        console.log(result);

        if (result.success) {
            const processedImagePath = result.processedImagePath;
            console.log('Background removed successfully.');
            profilePicPreview.src = processedImagePath;
            closeLoadingModal();
            updateModalWithNewImage(processedImagePath);
        } else {
            closeLoadingModal();
            showAlert(result.message);
        }
    } catch (error) {
        console.error('Error:', error);
        closeLoadingModal();
        showAlert('Error removing background');
    }
}
  
  function openLoadingModal() {
    const loadingModal = document.getElementById('loadingModal');
    loadingModal.style.display = 'block';
  }
  
  function closeLoadingModal() {
    const loadingModal = document.getElementById('loadingModal');
    loadingModal.style.display = 'none';
  }
  
  function updateModalWithNewImage(newImageUrl) {
    const modalImage = document.getElementById('modalImage');
    modalImage.src = newImageUrl;
  
    const iconButton = document.querySelector('.icon-button');
    iconButton.style.display = 'none';
  
    const closeButton = document.createElement('button');
    closeButton.className = 'close';
    closeButton.innerText = '&times;';
    closeButton.onclick = closeModal;
  
    const modalContent = document.querySelector('.modal-content');
    modalContent.appendChild(closeButton);
  }

function previewProfilePicture(event) {
  var reader = new FileReader();
  reader.onload = function(){
    var output = document.getElementById('profilePicPreview');
    output.src = reader.result;
  };
  reader.readAsDataURL(event.target.files[0]);
}
document.addEventListener('DOMContentLoaded', () => {
    // Initialize course tags without the 'selected' class
    const courseTags = document.querySelectorAll('#course-tags .course-btn');
    courseTags.forEach(tag => tag.classList.remove('selected'));

    // Add click event listener to existing course tags
    document.getElementById('course-tags').addEventListener('click', (event) => {
        if (event.target.classList.contains('course-btn')) {
            toggleCourseSelection(event.target);
        }
    });
});

function toggleCourseSelection(tag) {
    const coursesInput = document.getElementById('courses');
    let courses = coursesInput.value ? coursesInput.value.split(',').filter(c => c.trim() !== '') : [];
    const course = tag.dataset.course;

    console.log('Before toggle:');
    console.log('Courses array:', courses);
    console.log('Courses input value:', coursesInput.value);

    if (tag.classList.contains('selected')) {
        console.log('Unselecting course:', course);
        tag.classList.remove('selected');
        courses = courses.filter(c => c !== course);
    } else {
        console.log('Selecting course:', course);
        tag.classList.add('selected');
        if (!courses.includes(course)) {
            courses.push(course);
        }
    }

    coursesInput.value = courses.join(',');

    console.log('After toggle:');
    console.log('Courses array:', courses);
    console.log('Courses input value:', coursesInput.value);
}

// Define the selectCourse function
function selectCourse(course) {
    const courseTags = document.getElementById('course-tags');
    const courseButtons = Array.from(document.querySelectorAll('#course-tags .course-btn'));

    const matchingButton = courseButtons.find(btn => btn.textContent === course);
    if (matchingButton) {
        toggleCourseSelection(matchingButton);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const courseInput = document.getElementById('course-input');

    function fetchDegrees(url) {
        return fetch(url)
            .then(response => response.text())
            .then(data => {
                const degrees = data.split('-').map(degree => degree.trim()).filter(degree => degree !== '');
                        return degrees
            });
    }

    function initializeCoursesAwesomplete(list) {
        new Awesomplete(courseInput, {
            list: list,
                    minChars: 1,
                    maxItems: 10,
                    autoFirst: true,
                    filter: function(text, input) {
                        // Remove spaces and dots from the input
                        const normalizedInput = input.replace(/[\s.]/g, '').toLowerCase();
                        // Remove spaces and dots from the text
                        const normalizedText = text.replace(/[\s.]/g, '').toLowerCase();
                        return normalizedText.includes(normalizedInput);
                    },
                    item: function(text, input) {
                        // Highlight the matched part
                        const normalizedInput = input.replace(/[\s.]/g, '').toLowerCase();
                        const normalizedText = text.replace(/[\s.]/g, '').toLowerCase();
                        const index = normalizedText.indexOf(normalizedInput);
                        if (index === -1) {
                            return Awesomplete.ITEM(text, input);
                        }
                        const highlightedText = text.substring(0, index) + '<mark>' + text.substring(index, index + normalizedInput.length) + '</mark>' + text.substring(index + normalizedInput.length);
                        return Awesomplete.ITEM(highlightedText, input);
                    }
                });
            }

    // Fetch and initialize degrees
    fetchDegrees('/data/degrees.txt')
        .then(degrees => {
            console.log("Awesomplete degrees initialized");
            initializeCoursesAwesomplete(degrees);
        })
        .catch(error => console.error('Error fetching degrees:', error));
});

// Submit the course from the modal input
function submitCourse() {
    const course = document.getElementById('course-input').value;
    const courseTags = document.getElementById('course-tags');
    const courseButtons = Array.from(document.querySelectorAll('#course-tags .course-btn'));

    if (course && !courseButtons.some(btn => btn.textContent === course)) {
        const newBtn = document.createElement('button');
        newBtn.type = 'button';
        newBtn.className = 'course-btn';
        newBtn.textContent = course;
        newBtn.dataset.course = course; // Add data-course attribute
        newBtn.onclick = () => selectCourse(course);

        courseTags.appendChild(newBtn);
    } else if (courseButtons.some(btn => btn.textContent === course)) {
        showAlert('Course already exists.');
    }

    closeCourseModal(); // Close the modal after submission
}
        
        function selectType(type) {
            const typeButtons = document.querySelectorAll('.type-btn');
            typeButtons.forEach(btn => {
                if (btn.textContent === type) {
                    btn.classList.add('selected');
                } else {
                    btn.classList.remove('selected');
                }
            });
            document.getElementById('type').value = type;
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const cityInput = document.getElementById('city');
            const suggestions = document.getElementById('suggestions');
            const gpsButton = document.getElementById('gps-button');
            const confirmLocationButton = document.getElementById('confirm-location');
            const closeModalButton = document.getElementById('close-modal');
            const modal = document.getElementById('mapModal');

            let debounceTimeout;
            let map, marker;
            let selectedCoords = { lat: null, lng: null };  // Store selected coordinates
            let selectedAddress = ''; // Store selected address (city, state, country)

            // City suggestions input event
            cityInput.addEventListener('input', function () {
                const query = cityInput.value;

                // Clear the previous timeout to debounce the input
                clearTimeout(debounceTimeout);

                // Set a new timeout to delay the API call
                debounceTimeout = setTimeout(async () => {
                    if (query.length > 2) {
                        try {
                            const response = await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?namePrefix=${query}`, {
                                method: 'GET',
                                headers: {
                                    'X-RapidAPI-Key': '0d06f4016emsh27a4ce78184a820p1e1ef0jsn77b98c6b864a',
                                    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'
                                }
                            });

                            const data = await response.json();
                            const cities = data.data;

                            // Clear previous suggestions
                            suggestions.innerHTML = '';
                            suggestions.style.display = 'none'; // Hide suggestions initially

                            // Populate new suggestions
                            cities.forEach(city => {
                                const listItem = document.createElement('li');
                                listItem.textContent = `${city.city}, ${city.region}, ${city.country}`;
                                listItem.addEventListener('click', () => {
                                    cityInput.value = listItem.textContent;
                                    selectedAddress = listItem.textContent; // Store the selected address
                                    suggestions.innerHTML = '';  // Clear dropdown after selection
                                    suggestions.style.display = 'none'; // Hide suggestions after selection
                                });
                                suggestions.appendChild(listItem);
                                suggestions.style.display = 'block'; // Show suggestions
                            });
                        } catch (error) {
                            console.error('Error fetching city suggestions:', error);
                        }
                    } else {
                        suggestions.innerHTML = ''; // Clear suggestions if query is too short
                        suggestions.style.display = 'none'; // Hide suggestions
                    }
                }, 300);  // Delay of 300ms
            });

            // GPS button functionality to open the modal with map
            gpsButton.addEventListener('click', function () {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        const { latitude, longitude } = position.coords;
                        selectedCoords.lat = latitude;
                        selectedCoords.lng = longitude;

                        // Show the modal
                        modal.style.display = 'block';

                        // Initialize the map in the modal
                        if (!map) {
                            map = L.map('map').setView([latitude, longitude], 13);

                            // Add OpenStreetMap tile layer
                            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                attribution: '© OpenStreetMap contributors'
                            }).addTo(map);

                            // Add a draggable marker
                            marker = L.marker([latitude, longitude], { draggable: true }).addTo(map);

                            // Update coordinates when marker is dragged
                            marker.on('dragend', function (e) {
                                const position = e.target.getLatLng();
                                selectedCoords.lat = position.lat;
                                selectedCoords.lng = position.lng;
                            });
                        } else {
                            // Reset marker and map position on subsequent modal open
                            map.setView([latitude, longitude], 13);
                            marker.setLatLng([latitude, longitude]);
                        }
                    });
                } else {
                    alert("Geolocation is not supported by this browser.");
                }
            });

            // Confirm the selected location from the map
            confirmLocationButton.addEventListener('click', async function () {
                // Use reverse geocoding to get the address from coordinates
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${selectedCoords.lat}&lon=${selectedCoords.lng}`);
                const locationData = await response.json();

                // Construct the full address
                if (locationData && locationData.address) {
                    const { city, state, country } = locationData.address;
                    selectedAddress = `${city || ''}, ${state || ''}, ${country || ''}`.replace(/, +/g, ', ').trim(); // Format address
                    cityInput.value = selectedAddress; // Set input to the selected address
                }

                // Close the modal
                modal.style.display = 'none';
            });

            // Close modal
            closeModalButton.addEventListener('click', function () {
                modal.style.display = 'none';
            });

            // Prevent submission without selection from the dropdown
            cityInput.addEventListener('keydown', function (e) {
                if (e.key === 'Enter' && !suggestions.querySelector('li')) {
                    e.preventDefault();
                    alert('Please select a city from the list.');
                }
            });

            // Close the modal if user clicks outside of it
            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            };
        });
    </script>
       
    <script>
        function previewProfilePicture(event) {
          const reader = new FileReader();
          reader.onload = function() {
            const output = document.getElementById('profilePicPreview');
            output.src = reader.result;
          };
          reader.readAsDataURL(event.target.files[0]);
        }
      </script>
      
      <script>
        function validateEmail() {
          const emailInput = document.getElementById('email');
          const emailError = document.getElementById('emailError');
          const emailPattern = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$/;
      
          if (emailPattern.test(emailInput.value)) {
            emailError.style.display = 'none';
          } else {
            emailError.style.display = 'block';
          }
        }
      </script>
      
      <script>
        function validateContact() {
          const contactInput = document.getElementById('contact');
          const contactError = document.getElementById('contactError');
          const contactPattern = /^\+91 \d{10}$/;
      
          if (contactPattern.test(contactInput.value)) {
            contactError.style.display = 'none';
          } else {
            contactError.style.display = 'block';
          }
        }
      </script>
          
      <script>
        function validateName(fieldName) {
          const nameInput = document.getElementsByName(fieldName)[0];
          const nameError = document.getElementById(fieldName + 'Error');
          const namePattern = /^[A-Za-z]+$/;
      
          if (namePattern.test(nameInput.value)) {
            nameError.style.display = 'none';
          } else {
            nameError.style.display = 'block';
          }
        }
      </script>
      <!-- Modal Structure -->
<div id="imageModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <img id="modalImage" src="/assets/default.jpg" alt="Profile Picture" style="width: 100%; height: auto;">
      <button class="icon-button" onclick="handleIconClick()">
        Remove Background With AI
        <!-- Embed SVG directly -->
        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 256 256" enable-background="new 0 0 256 256" xml:space="preserve">
          <metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>
          <g>
            <g>
              <g>
                <g>
                  <g>
                    <path fill="#ffffff" d="M140.2,79.7L10.4,209.5l-0.4,0.4l26.3,26.3l0.4,0.4l129.8-129.8l0.4-0.4l-26.3-26.3L140.2,79.7z"/>
                  </g>
                  <g>
                    <path fill="#ffffff" d="M184.5,89.1c2.8-2.4,5.3-4.5,5.4-7.5c0.1-1.9-0.8-3.7-2.7-5.6l-16.6-16.6c-1.8-1.8-3.6-2.7-5.4-2.7c-3.2,0-5.4,2.6-7.8,5.4l-0.3,0.3c-0.8,1-1.7,2-2.7,3c-1,1-2,1.9-3,2.8l-0.2,0.2c-2.8,2.4-5.3,4.5-5.4,7.5c-0.1,1.9,0.8,3.8,2.7,5.6L165.2,98c1.8,1.8,3.6,2.7,5.4,2.7c3.2,0,5.3-2.5,7.8-5.5c0.9-1.1,1.8-2.1,2.9-3.2C182.3,90.9,183.4,90,184.5,89.1z M170.5,95.9c-0.5,0-1.2-0.5-2-1.3L152,78.1c-1.1-1.2-1.3-1.8-1.3-2c0-1,2-2.6,3.7-4.1c1.1-0.9,2.3-2,3.5-3.2c1.2-1.2,2.3-2.5,3.2-3.6c1.5-1.7,3.2-3.7,4.1-3.7c0.5,0,1.2,0.5,2,1.3l16.6,16.6c1.2,1.2,1.3,1.8,1.3,2c0,0.9-2,2.6-3.7,4.1c-1.2,1-2.4,2-3.6,3.2c-1.2,1.2-2.3,2.5-3.2,3.6C173.2,94,171.5,95.9,170.5,95.9z"/>
                  </g>
                  <g>
                    <path fill="#ffffff" d="M201.2 97.4L193.3 108 180.2 108.5 190.7 116.5 191.3 129.5 199.2 119.1 212.3 118.5 201.8 110.6 z"/>
                  </g>
                  <g>
                    <path fill="#ffffff" d="M227.9,46.8l-1-22.7l-13.6,18.1l-22.7,1l18.2,13.7l1,22.5l13.6-18l22.7-1L227.9,46.8z"/>
                  </g>
                  <g>
                    <path fill="#ffffff" d="M162.7 53.3L171 42.3 184.9 41.7 173.8 33.3 173.2 19.4 164.8 30.5 150.9 31.1 162.1 39.5 z"/>
                  </g>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </button>
    </div>
  </div>
  <!-- Loading Modal -->
<div id="loadingModal" class="modal">
    <div class="modal-content">
      <img src="/assets/ai.gif" alt="Loading" style="width: 100px; height: 100px;">
      <p>Removing background with AI</p>
    <p style="font-size: 14px; color: #333; cursor: pointer;" onclick="window.open('/ai-tools', '_blank')">Worknet Advanced AI Tools</p>
    </div>
  </div>
        <!-- Modal for Adding a Skill -->
    <div id="skill-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeSkillModal()">&times;</span>
            <h2>Add a New Skill</h2>
            <input type="text" id="skill-input" placeholder="Enter a skill">
            <button type="button" onclick="submitSkill()">Add Skill</button>
        </div>
    </div> 
    
    <!-- Modal for Alert -->
<div id="alert-modal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeAlertModal()">&times;</span>
        <h2 id="alert-message">Alert Message</h2>
        <button onclick="closeAlertModal()">OK</button>
    </div>
</div>
<!-- Modal for Adding a Type -->
<div id="type-modal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeTypeModal()">&times;</span>
        <h2>Add a New Type</h2>
        <input type="text" id="type-input" placeholder="Enter a type">
        <button type="button" onclick="submitType()">Add Type</button>
    </div>
</div><!-- Modal for Adding a Course -->
<div id="course-modal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeCourseModal()">&times;</span>
        <h2>Add a New Course</h2>
        <input type="text" id="course-input" placeholder="Enter a course">
        <button type="button" onclick="submitCourse()">Add Course</button>
    </div>
</div><!-- Modal for Adding a Language -->
<div id="language-modal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeLanguageModal()">&times;</span>
        <h2>Add a New Language</h2>
        <input type="text" id="language-input" placeholder="Enter a language">
        <button type="button" onclick="submitLanguage()">Add Language</button>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('details-form').addEventListener('submit', function (event) {
          event.preventDefault(); // Prevent the default form submission
      
          const formData = new FormData(this);
      
          // Send the form data via AJAX using fetch
          fetch('/submit-details', {
            method: 'POST',
            body: formData
          })
          .then(response => {
            if (!response.ok) {
              // If the response is not OK, log the HTML error response
              return response.text().then(text => { throw new Error(text); });
            }
            return response.json(); // Try to parse JSON if successful
          })
          .then(data => {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = 'Your details have been successfully saved.';
            messageDiv.style.display = 'block';
      
            setTimeout(() => {
              window.location.href = '/dashboard';
            }, 1500);
          })
          .catch(error => {
            console.error('Error submitting form:', error.message);
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = 'An error occurred while submitting your details. Please try again.';
            messageDiv.style.display = 'block';
          });
        });
      });    
</script>
</body>
</html>